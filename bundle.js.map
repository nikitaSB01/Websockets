{"version":3,"file":"bundle.js","mappings":"iCACA,MAAMA,EAAK,IAAIC,UAAU,uCAGzBD,EAAGE,OAAS,KACVC,QAAQC,IAAI,oCAAoC,EAIlDJ,EAAGK,QAAU,KACXF,QAAQC,IAAI,yCAAyC,EAIvDJ,EAAGM,UAAaC,IACd,MAAMC,EAAUC,KAAKC,MAAMH,EAAMI,MACjCR,QAAQC,IAAI,gBAAiBI,EAAQ,EAKvCI,SAASC,iBAAiB,oBAAoB,KAC5C,MAAMC,EAAQF,SAASG,eAAe,kBAChCC,EAAgBJ,SAASG,eAAe,kBACxCE,EAAiBL,SAASG,eAAe,mBACzCG,EAAqBN,SAASG,eAAe,iBAGnDE,EAAeJ,iBAAiB,SAAS,KACvC,MAAMM,EAAWH,EAAcI,MAAMC,OACjCF,EAQNG,eAA6BC,GAC3B,IACE,MAAMC,QAAiBC,MACrB,iDACA,CACEC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMnB,KAAKoB,UAAU,CAAEN,WAGrBO,QAAeN,EAASO,OAER,OAAlBD,EAAOE,QACT7B,QAAQC,IAAI,sBAAuB0B,EAAOG,KAAKV,MAC/CT,EAAMoB,MAAMC,QAAU,OAW5B,SAAwBhB,GACtB,MAAMiB,EAAgBxB,SAASG,eAAe,kBACxCsB,EAAezB,SAASG,eAAe,iBACvCuB,EAAoB1B,SAASG,eAAe,gBAC5CwB,EAAoB3B,SAASG,eAAe,YAC5CyB,EAAiB5B,SAASG,eAAe,SAE/CqB,EAAcF,MAAMC,QAAU,OAE9B,MAAMnC,EAAK,IAAIC,UAAU,uCAGnBwC,EAAeC,aAAY,KAC3B1C,EAAG2C,aAAe1C,UAAU2C,MAC9B5C,EAAG6C,KAAKpC,KAAKoB,UAAU,CAAEiB,KAAM,OAAQb,KAAM,CAAEV,KAAMJ,KACvD,GACC,KA2BH,SAAS4B,IACP,MAAMC,EAAcX,EAAajB,MAAMC,OACvC,GAAI2B,EAAa,CACf,MAAMC,EAAc,CAClBH,KAAM,OACNtC,QAASwC,EACTf,KAAM,CAAEV,KAAMJ,GACd+B,WAAW,IAAIC,MAAOC,eAGxBpD,EAAG6C,KAAKpC,KAAKoB,UAAUoB,IAEvBI,EAAe,IACVJ,EACHhB,KAAM,CAAEV,KAAM,SAGhBc,EAAajB,MAAQ,EACvB,CACF,CAmBA,SAASiC,EAAe1C,GACtB,MAAM2C,EAAiB1C,SAAS2C,cAAc,OAC9CD,EAAeE,UACM,QAAnB7C,EAAKsB,KAAKV,KAAiB,aAAe,gBAE5C,MAAMkC,EAAc7C,SAAS2C,cAAc,OAC3CE,EAAYD,UAAY,eACxB,MAAME,EAAO,IAAIP,KAAKxC,EAAKuC,WAAaC,KAAKQ,OACvCC,EAAgBF,EAAKG,qBACrBC,EAAgBJ,EAAKK,qBAC3BN,EAAYO,UAAY,WAAWrD,EAAKsB,KAAKV,0CAA0CqC,KAAiBE,WAExG,MAAMG,EAAcrD,SAAS2C,cAAc,OAC3CU,EAAYT,UAAY,eACxBS,EAAYC,YAAcvD,EAAKH,QAE/B8C,EAAea,YAAYV,GAC3BH,EAAea,YAAYF,GAC3B1B,EAAkB4B,YAAYb,GAC9Bf,EAAkB6B,UAAY7B,EAAkB8B,YAClD,CAEA,SAASC,EAAeC,GACtB/B,EAAewB,UAAY,GAC3BO,EAAMC,SAASvC,IACb,MAAMwC,EAAc7D,SAAS2C,cAAc,MAC3CkB,EAAYP,YAAcjC,EAAKV,OAASJ,EAAW,MAAQc,EAAKV,KAE5DU,EAAKV,OAASJ,GAChBsD,EAAYC,UAAUC,IAAI,gBAE5BnC,EAAe2B,YAAYM,EAAY,GAE3C,CAhGAzE,EAAGE,OAAS,KACVF,EAAG6C,KACDpC,KAAKoB,UAAU,CACbiB,KAAM,OACNb,KAAM,CAAEV,KAAMJ,KAEjB,EAGHnB,EAAGM,UAAaC,IACd,MAAMI,EAAOF,KAAKC,MAAMH,EAAMI,MAE9B,GAAIiE,MAAMC,QAAQlE,GAAO,CAEvB2D,EADoB3D,EAAKmE,QAAQ7C,GAAuB,KAAdA,EAAKV,OAEjD,KAAyB,SAAdZ,EAAKmC,KACVnC,EAAKsB,KAAKV,OAASJ,GACrBkC,EAAe1C,GAEM,YAAdA,EAAKmC,OACdP,EAAkByB,UAAY,GAC9BrD,EAAKA,KAAK6D,SAASO,GAAQ1B,EAAe0B,KAC5C,EAyBF1C,EAAaxB,iBAAiB,WAAYN,IACtB,UAAdA,EAAMyE,MACRzE,EAAM0E,iBACNlC,IACF,IAIFT,EAAkBzB,iBAAiB,QAASkC,GAG5C7B,EAAmBL,iBAAiB,SAAS,KAC3Cb,EAAG6C,KAAKpC,KAAKoB,UAAU,CAAEiB,KAAM,WAC/BP,EAAkByB,UAAY,EAAE,IAsClCkB,OAAOrE,iBAAiB,gBAAgB,KACtCb,EAAG6C,KACDpC,KAAKoB,UAAU,CACbiB,KAAM,OACNb,KAAM,CAAEV,KAAMJ,MAGlBnB,EAAGmF,QACHC,cAAc3C,EAAa,IAG7B7B,SAASC,iBAAiB,oBAAoB,KACX,WAA7BD,SAASyE,kBACXrF,EAAG6C,KAAKpC,KAAKoB,UAAU,CAAEiB,KAAM,OAAQb,KAAM,CAAEV,KAAMJ,MACrDnB,EAAGmF,QACL,GAEJ,CA/IMG,CAAe/D,IAEfgE,MAAMzD,EAAOtB,QAEjB,CAAE,MAAOgF,GACPrF,QAAQqF,MAAM,gCAAiCA,EACjD,CACF,CA/BIC,CAActE,GAEdoE,MAAM,iCACR,GAoKF,G,GCrMEG,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,CAAC,GAOX,OAHAE,EAAoBL,GAAUI,EAAQA,EAAOD,QAASJ,GAG/CK,EAAOD,OACf,CCrBAJ,EAAoBO,EAAI,SAASF,GAChC,IAAIG,EAASH,GAAUA,EAAOI,WAC7B,WAAa,OAAOJ,EAAgB,OAAG,EACvC,WAAa,OAAOA,CAAQ,EAE7B,OADAL,EAAoBU,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CACR,ECNAR,EAAoBU,EAAI,SAASN,EAASQ,GACzC,IAAI,IAAIvB,KAAOuB,EACXZ,EAAoBa,EAAED,EAAYvB,KAASW,EAAoBa,EAAET,EAASf,IAC5EyB,OAAOC,eAAeX,EAASf,EAAK,CAAE2B,YAAY,EAAMC,IAAKL,EAAWvB,IAG3E,ECPAW,EAAoBa,EAAI,SAASK,EAAKC,GAAQ,OAAOL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,EAAO,E","sources":["webpack://websockets/./src/js/index.js","webpack://websockets/webpack/bootstrap","webpack://websockets/webpack/runtime/compat get default export","webpack://websockets/webpack/runtime/define property getters","webpack://websockets/webpack/runtime/hasOwnProperty shorthand"],"sourcesContent":["// Подключение к WebSocket серверу\nconst ws = new WebSocket(\"wss://websocketsserver.onrender.com\");\n\n// Событие открытия соединения\nws.onopen = () => {\n  console.log(\"==> Connected to WebSocket server\");\n};\n\n// Событие закрытия соединения\nws.onclose = () => {\n  console.log(\"==> Disconnected from WebSocket server\");\n};\n\n// Событие получения сообщения\nws.onmessage = (event) => {\n  const message = JSON.parse(event.data);\n  console.log(\"==> Received:\", message);\n};\n\n//? ......  Обработка клика кнопки и проверка никнейма .......\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const modal = document.getElementById(\"nickname-modal\");\n  const nicknameInput = document.getElementById(\"nickname-input\");\n  const nicknameSubmit = document.getElementById(\"nickname-submit\");\n  const clearHistoryButton = document.getElementById(\"clear-history\");\n\n  // Обработчик нажатия на кнопку \"Продолжить\"\n  nicknameSubmit.addEventListener(\"click\", () => {\n    const nickname = nicknameInput.value.trim();\n    if (nickname) {\n      checkNickname(nickname); // Проверка уникальности псевдонима\n    } else {\n      alert(\"Пожалуйста, введите псевдоним.\");\n    }\n  });\n\n  // Функция проверки никнейма\n  async function checkNickname(name) {\n    try {\n      const response = await fetch(\n        \"https://websocketsserver.onrender.com/new-user\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ name }),\n        },\n      );\n      const result = await response.json();\n\n      if (result.status === \"ok\") {\n        console.log(\"==> Никнейм принят:\", result.user.name);\n        modal.style.display = \"none\"; // Скрыть модальное окно\n        initializeChat(name); // Инициализация чата с никнеймом\n      } else {\n        alert(result.message);\n      }\n    } catch (error) {\n      console.error(\"Ошибка при проверке никнейма:\", error);\n    }\n  }\n\n  // Функция для инициализации чата после успешного ввода никнейма\n  function initializeChat(nickname) {\n    const chatContainer = document.getElementById(\"chat-container\");\n    const messageInput = document.getElementById(\"message-input\");\n    const sendMessageButton = document.getElementById(\"send-message\");\n    const messagesContainer = document.getElementById(\"messages\");\n    const usersContainer = document.getElementById(\"users\");\n\n    chatContainer.style.display = \"flex\";\n\n    const ws = new WebSocket(\"wss://websocketsserver.onrender.com\");\n\n    // Таймер для отправки пинг-сообщений каждые 3 секунд\n    const pingInterval = setInterval(() => {\n      if (ws.readyState === WebSocket.OPEN) {\n        ws.send(JSON.stringify({ type: \"ping\", user: { name: nickname } }));\n      }\n    }, 3000);\n\n    ws.onopen = () => {\n      ws.send(\n        JSON.stringify({\n          type: \"join\",\n          user: { name: nickname },\n        }),\n      );\n    };\n\n    ws.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n\n      if (Array.isArray(data)) {\n        const uniqueUsers = data.filter((user) => user.name !== \"\");\n        updateUserList(uniqueUsers);\n      } else if (data.type === \"send\") {\n        if (data.user.name !== nickname) {\n          displayMessage(data);\n        }\n      } else if (data.type === \"history\") {\n        messagesContainer.innerHTML = \"\";\n        data.data.forEach((msg) => displayMessage(msg));\n      }\n    };\n\n    function sendMessage() {\n      const messageText = messageInput.value.trim();\n      if (messageText) {\n        const messageData = {\n          type: \"send\",\n          message: messageText,\n          user: { name: nickname },\n          timestamp: new Date().toISOString(),\n        };\n\n        ws.send(JSON.stringify(messageData));\n\n        displayMessage({\n          ...messageData,\n          user: { name: \"You\" },\n        });\n\n        messageInput.value = \"\";\n      }\n    }\n\n    // Добавляем обработчик нажатия Enter на поле ввода\n    messageInput.addEventListener(\"keydown\", (event) => {\n      if (event.key === \"Enter\") {\n        event.preventDefault();\n        sendMessage();\n      }\n    });\n\n    // Обработчик для кнопки отправки\n    sendMessageButton.addEventListener(\"click\", sendMessage);\n\n    // Обработчик для кнопки очистки истории\n    clearHistoryButton.addEventListener(\"click\", () => {\n      ws.send(JSON.stringify({ type: \"clear\" }));\n      messagesContainer.innerHTML = \"\";\n    });\n\n    function displayMessage(data) {\n      const messageElement = document.createElement(\"div\");\n      messageElement.className =\n        data.user.name === \"You\" ? \"my-message\" : \"other-message\";\n\n      const metaElement = document.createElement(\"div\");\n      metaElement.className = \"message-meta\";\n      const date = new Date(data.timestamp || Date.now());\n      const formattedDate = date.toLocaleDateString();\n      const formattedTime = date.toLocaleTimeString();\n      metaElement.innerHTML = `<strong>${data.user.name}:</strong> <span class=\"timestamp\">${formattedDate} ${formattedTime}</span>`;\n\n      const textElement = document.createElement(\"div\");\n      textElement.className = \"message-text\";\n      textElement.textContent = data.message;\n\n      messageElement.appendChild(metaElement);\n      messageElement.appendChild(textElement);\n      messagesContainer.appendChild(messageElement);\n      messagesContainer.scrollTop = messagesContainer.scrollHeight;\n    }\n\n    function updateUserList(users) {\n      usersContainer.innerHTML = \"\";\n      users.forEach((user) => {\n        const userElement = document.createElement(\"li\");\n        userElement.textContent = user.name === nickname ? \"You\" : user.name;\n\n        if (user.name === nickname) {\n          userElement.classList.add(\"current-user\");\n        }\n        usersContainer.appendChild(userElement);\n      });\n    }\n\n    window.addEventListener(\"beforeunload\", () => {\n      ws.send(\n        JSON.stringify({\n          type: \"exit\",\n          user: { name: nickname },\n        }),\n      );\n      ws.close();\n      clearInterval(pingInterval); // Очищаем таймер при закрытии соединения\n    });\n\n    document.addEventListener(\"visibilitychange\", () => {\n      if (document.visibilityState === \"hidden\") {\n        ws.send(JSON.stringify({ type: \"exit\", user: { name: nickname } }));\n        ws.close();\n      }\n    });\n  }\n});\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }"],"names":["ws","WebSocket","onopen","console","log","onclose","onmessage","event","message","JSON","parse","data","document","addEventListener","modal","getElementById","nicknameInput","nicknameSubmit","clearHistoryButton","nickname","value","trim","async","name","response","fetch","method","headers","body","stringify","result","json","status","user","style","display","chatContainer","messageInput","sendMessageButton","messagesContainer","usersContainer","pingInterval","setInterval","readyState","OPEN","send","type","sendMessage","messageText","messageData","timestamp","Date","toISOString","displayMessage","messageElement","createElement","className","metaElement","date","now","formattedDate","toLocaleDateString","formattedTime","toLocaleTimeString","innerHTML","textElement","textContent","appendChild","scrollTop","scrollHeight","updateUserList","users","forEach","userElement","classList","add","Array","isArray","filter","msg","key","preventDefault","window","close","clearInterval","visibilityState","initializeChat","alert","error","checkNickname","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","n","getter","__esModule","d","a","definition","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call"],"sourceRoot":""}